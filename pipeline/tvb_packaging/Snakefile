import os

"""
export SUBJECTS_DIR=~/hdd/data/neuroimaging/freesurfer_output/

A snakemake file for running reconstructions on the neuroimaging data.

snakemake --dag | dot -Tpdf > dag_neuroimaging_pipeline_reconstruction.pdf

Runs tests to ensure data is all in the corresponding format:

0. patient (raw)
    - premri
        - (list) dicoms
    - postct
        - (list) dicoms
    - dti
        - (list) dicoms

0b. freesurfer_output / reconstruction_output
    - patient (reconstruction)
        - (tree) files
    - finaloutput_datadir (stores all files we want to use in the next step)
    - success_file_flag.txt
    - stick all raw file

1. patient (processed)
    - mri
        - nifti volume image
    - ct
        - nifti volume image
    - dti (optional)
        - nifti volume image
    - elecs
        - ct_in_t1_volume image
        - chans_xyz.txt
    - surface (how to draw out the brain; )
        - triangles.txt
        - vertices.txt
        - normals.txt
        - voxel_xyz.txt
    - parcellation (depends on atlas)
        -<atlas_1>
            - region_mapping_cort_<atlas>.txt
            - region_mapping_subcort_<atlas>.txt
            - region_centres_<atlas>.txt
            - region_areas_<atlas>.txt
            - region_cortical_<atlas>.txt
            - region_average_orientations_<atlas>.txt
            - label_in_T1_<atlas> volume image (maps all voxels to an atlas region)
    - connectome (depends on atlas)
        - tract_lengths_<atlas>.txt
        - weights_<atlas>.txt
        - gain_mat_<atlas>.txt (how to project regional activity -> sensor space | mainly for TVB)
    - seeg
        - edf
        - fif
    - scalp
        - edf
        - fif
    - clinical
        - ez_hypothesis_chans.txt
        - ez_hypothesis_<atlas>.txt
        - stores clinical metadata
        - PPTs related
    TUTORIAL_FILE.TXT

If this doesn't work off the bat, make sure you explicitly set SUBJECTS_DIR
"""
configfile: "../config/localconfig.yaml"

# get the environment variable for freesurfer - for use in getting access to lut's
FREESURFER_HOME = os.getenv("FREESURFER_HOME") or ''
MRTRIX3_HOME = os.getenv("MRTRIX3_HOME") or ''
HOME_DIR="../../"
SCRIPTS_UTIL_DIR = "../../neuroimg/format"
ATLAS=['dk', 'destrieux']

''' USER DEFINED DIRECTORIES TO STORE FINAL DATA IN ORGANIZED SUBFOLDERS '''
FS_PATIENT_OUTPUT_DIR = os.path.join(config['fs_outputdatadir'],
                                     "{patient_id}")

TVB_OUTPUT_DIR = os.path.join(FS_PATIENT_OUTPUT_DIR, "tvb")

# key-word parameters
parc = "aparc.a2009s"
aa = "aparc+aseg"
sval = "pial"
hemispheres = ['lh', 'rh']
resamp_target = "fsaverage5"

# First rule
rule all:
    input:
        # master output file
        tvb_output_file = expand(os.path.join(TVB_OUTPUT_DIR, "connectivity_{atlas}.zip"),
                     patient_id=config['patients'], atlas=ATLAS),
        # label in source lut volume
        # label_volume_file = expand(os.path.join(TVB_OUTPUT_DIR, "label_in_T1_volume.{atlas}.nii.gz"),
        #             patient_id=config['patients'], atlas=ATLAS),
    shell:
        "echo 'done'"


"""
Rule for converting the pial surfaces to ascii data, so that it is readable by python/matlab.
"""
rule convert_pial_surface_files_ascii:
    input:
        outsuccess_file=os.path.join(config['fs_outputdatadir'],
                                "{patient_id}_recon_success.txt")
    params:
        lhpial = os.path.join(FS_PATIENT_OUTPUT_DIR, "surf",
                              "lh.pial"),
        rhpial = os.path.join(FS_PATIENT_OUTPUT_DIR, "surf",
                              "rh.pial"),
    output:
        lhpial=os.path.join(FS_PATIENT_OUTPUT_DIR, "surf", "ascii",
                            "lh.pial.asc"),
        rhpial=os.path.join(FS_PATIENT_OUTPUT_DIR, "surf", "ascii",
                            "rh.pial.asc"),
    shell:
        "mris_convert {params.lhpial} {output.lhpial};"
        "mris_convert {params.rhpial} {output.rhpial};"


"""
Rule for converting labels in one volume to another labeling system.

Used for converting FS's lookup table to flirt's lookuptable, which is easier to read.

Rule for creating a label volume file that is mapped
in our simple space of FS (0-83 or 0-255) vs the unsequential mappings.

Makes things simpler to analyze under one LUT.
"""
rule create_label_in_mri_volume:
    input:
        # ras_std_label_volume=os.path.join(FS_PATIENT_OUTPUT_DIR,
        #                         "converted_coord_system",
        #                         "label_{atlas}.RAS.RO.nii.gz")
        desikan_orig_file=os.path.join(FS_PATIENT_OUTPUT_DIR, "mri",
                               "aparc.a2009s+aseg.mgz"),
        destrieux_orig_file = os.path.join(FS_PATIENT_OUTPUT_DIR, "mri",
                                   "aparc.a2009s+aseg.mgz"),

    params:
        lut_fs = os.path.join(FREESURFER_HOME, "FreeSurferColorLUT.txt"),
        lut_target = os.path.join(MRTRIX3_HOME, "share/mrtrix3/labelconvert/fs_default.txt")
    output:
        label_volume_file=os.path.join(TVB_OUTPUT_DIR,
                                "label_in_T1_volume.{atlas}.nii.gz")
    shell:
        # "labelconvert {input.ras_std_label_volume} \
        #             {params.lut_fs} \
        #             {params.lut_target} \
        #             {output.label_volume_file};"
        "labelconvert {input.desikan_orig_file} \
                    {params.lut_fs} \
                    {params.lut_target} \
                    {output.label_volume_file};"
        "labelconvert {input.destrieux_orig_file} \
                    {params.lut_fs} \
                    {params.lut_target} \
                    {output.label_volume_file};"


"""
Rule for extracting surface geometry information from the
MRI volumes
"""
rule create_structural_dataset:
    input:
        subcort_success_flag_file=os.path.join(FS_PATIENT_OUTPUT_DIR,
                                    "{patient_id}_subcort_success.txt"),
        lhpial=os.path.join(FS_PATIENT_OUTPUT_DIR, "surf", "ascii",
                            "lh.pial.asc"),
        rhpial=os.path.join(FS_PATIENT_OUTPUT_DIR,"surf", "ascii",
                            "rh.pial.asc"),
        lhlabel=os.path.join(FS_PATIENT_OUTPUT_DIR,"label",
                            "lh.aparc.annot"),
        rhlabel=os.path.join(FS_PATIENT_OUTPUT_DIR, "label",
                            "rh.aparc.annot"),
        label_volume_file=os.path.join(TVB_OUTPUT_DIR,
                                "label_in_T1_volume.{atlas}.nii.gz"),
    params:
        subcortdir = os.path.join(FS_PATIENT_OUTPUT_DIR, "aseg2srf"),
        subjdir=FS_PATIENT_OUTPUT_DIR,
        output_surface_dir=TVB_OUTPUT_DIR,
        lut_fs=os.path.join(FREESURFER_HOME, "FreeSurferColorLUT.txt"),
        lut_target=os.path.join(MRTRIX3_HOME, "share/mrtrix3/labelconvert/fs_default.txt"),
        scripts_dir=os.path.join(SCRIPTS_UTIL_DIR)
    output:
        output_file=os.path.join(TVB_OUTPUT_DIR,
                                "connectivity_{atlas}.zip")
    shell:
        "echo 'RUNNING CREATION OF FINAL FILES...';"
        "cd {params.scripts_dir};"
        # "touch {output.output_file};"
        "python -m create_surface_files {params.subjdir} \
                                        {params.subcortdir} \
                                        {params.lut_fs} \
                                        {params.lut_target} \
                                        {output.output_file} \
                                        {params.output_surface_dir};"