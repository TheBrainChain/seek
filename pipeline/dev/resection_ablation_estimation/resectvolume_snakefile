import snakemake
import os
"""
export SUBJECTS_DIR=~/hdd/data/neuroimaging/freesurfer_output/

A snakemake file for running reconstructions on the neuroimaging data.

snakemake --dag | dot -Tpdf > dag_neuroimaging_pipeline.pdf

Runs tests to ensure data is all in the corresponding format:

0. patient (raw)
    - premri
        - (list) dicoms
    - postct
        - (list) dicoms
    - dti
        - (list) dicoms

0b. freesurfer_output / reconstruction_output
    - patient (reconstruction)
        - (tree) files
    - finaloutput_datadir (stores all files we want to use in the next step)
    - success_file_flag.txt
    - stick all raw file

1. patient (processed)
    - mri
        - nifti volume image
    - ct
        - nifti volume image
    - dti (optional)
        - nifti volume image
    - elec
        - ct_in_t1_volume image
        - chans_xyz.txt
    - surface (how to draw out the brain; )
        - triangles.txt
        - vertices.txt
        - normals.txt
        - voxel_xyz.txt
    - parcellation (depends on atlas)
        -<atlas_1>
            - region_mapping_cort_<atlas>.txt
            - region_mapping_subcort_<atlas>.txt
            - region_centres_<atlas>.txt
            - region_areas_<atlas>.txt
            - region_cortical_<atlas>.txt
            - region_average_orientations_<atlas>.txt
            - label_in_T1_<atlas> volume image (maps all voxels to an atlas region)
    - connectome (depends on atlas)
        - tract_lengths_<atlas>.txt
        - weights_<atlas>.txt
        - gain_mat_<atlas>.txt (how to project regional activity -> sensor space | mainly for TVB)
    - seeg
        - edf 
        - fif
    - scalp
        - edf
        - fif
    - clinical
        - ez_hypothesis_chans.txt
        - ez_hypothesis_<atlas>.txt
        - stores clinical metadata
        - PPTs related
    TUTORIAL_FILE.TXT

If this doesn't work off the bat, make sure you explicitly set SUBJECTS_DIR
"""

configfile: "../config/localconfig.yaml"
snakemake.utils.validate(config, "../config/preformat_config.schema.yaml")

# get the environment variable for freesurfer - for use in getting access to lut's
FREESURFER_HOME = os.getenv("FREESURFER_HOME") or ''
MRTRIX3_HOME = os.getenv("MRTRIX3_HOME") or ''
HOME_DIR="../../"
SCRIPTS_UTIL_DIR = "../../neuroimg/format/"
ATLAS=['dk']

parc = "aparc.a2009s"
aa = "aparc+aseg"
sval = "pial"
hemispheres = ['lh', 'rh']
resamp_target = "fsaverage5"

RESECTION_VOLUME_DIR = os.path.join(config['finaloutput_datadir'],
                                    "{patient_id}",
                                    "resectionvolume",
                                    )
PATIENT_OUTPUT_DIR = os.path.join(config['finaloutput_datadir'],
                                        "{patient_id}")
COREGISTRATION_OUTPUT_DIR = os.path.join(config['finaloutput_datadir'],
                                        "{patient_id}",
                                         "coregistration")
output_registration_file = os.path.join(RESECTION_VOLUME_DIR,
                                        "post_in_pre_T1_robustregistration.nii.gz")

subworkflow reconstruction_workflow:
    workdir:
        "../"
    snakefile:
        "../Snakefile"
    configfile:
        "../config/localconfig.yaml"

# POSTMRI_IMG_MGZ_norm = expand(os.path.join(RESECTION_VOLUME_DIR,
#                                      "postT1_normalize.mgz"),
#                                 patient_id=config['patients']),
# PREMRI_IMG_MGZ_norm = expand(os.path.join(RESECTION_VOLUME_DIR,
#                                     "preT1_normalize.mgz"),
#                                 patient_id=config['patients']),
# POSTT1_IN_PRE_NIFTI_IMG_ORIG = expand(os.path.join(RESECTION_VOLUME_DIR,
#                                        "POST_IN_PRE_T1.nii"),
#                                  patient_id=config['patients']),
# POSTMRI_NIFTI_IMG_MGZ = expand(os.path.join(RESECTION_VOLUME_DIR,
#                                      "postT1.mgz"),
#                                patient_id=config['patients']),
# PREMRI_NIFTI_IMG_MGZ = expand(os.path.join(RESECTION_VOLUME_DIR,
#                                     "preT1.mgz"),
#                                 patient_id=config['patients']),
# First rule
rule all:
    input:
        # DEPENDENCY ON RECONSTRUCTION WORKFLOW
        reconstruction_workflow(expand(os.path.join(config['finaloutput_datadir'],
                            "{patient_id}",
                            "tvb/connectivity.zip"),
                             patient_id=config['patients'])),
        # OUTPUT REGISTRATION FILES FROM FLIRT, ROBUST_REGISTER AND LDMM
        OUTPUT_ROBUST_REGISTRATION_FILE = expand(os.path.join(RESECTION_VOLUME_DIR,
                                        "post_in_pre_T1_robustregistration.mgz"),
                                         patient_id=config['patients']),
        # mapping matrix for CT to T1
        MAPPING_FILE=expand(os.path.join(RESECTION_VOLUME_DIR,
                                        "fsl_post-to-pre-t1_omat.txt"),
                                    patient_id=config['patients']),
        LDDMM_MAPPED_FILE=expand(os.path.join(RESECTION_VOLUME_DIR,
                                        "ldmm_post-to-pre-t1_omat.txt"),
                                    patient_id=config['patients']),
    shell:
        "echo 'done'"

"""
Rule for converting .dicom -> .nifti

Assumes user has premri and postct with DTI being optional, as this is not standard clinical procedure
in the USA.
"""
rule dicom_to_nifti:
    params:
        MRI_FOLDER=os.path.join(config['rawdatadir'],
                                        "{patient_id}", 'postmri'),
    output:
        MRI_NIFTI_IMG=os.path.join(PATIENT_OUTPUT_DIR,
                                          "postT1.nii")
    shell:
        "echo {params};"
        "mrconvert {params.MRI_FOLDER} {output.MRI_NIFTI_IMG};"

"""
Rule to convert nifti to MNI space image volumes.
"""
rule convert_to_mgz:
    input:
        POSTMRI_NIFTI_IMG_ORIG = os.path.join(PATIENT_OUTPUT_DIR,
                                    "postT1.nii"),
        PREMRI_NIFTI_IMG_ORIG = os.path.join(PATIENT_OUTPUT_DIR,
                                     "T1.nii"),
    output:
        POSTMRI_NIFTI_IMG_MGZ = os.path.join(RESECTION_VOLUME_DIR,
                                    "postT1.mgz"),
        PREMRI_NIFTI_IMG_MGZ = os.path.join(RESECTION_VOLUME_DIR,
                                     "preT1.mgz"),
    shell:
        "mrconvert {input.PREMRI_NIFTI_IMG_ORIG} {output.PREMRI_NIFTI_IMG_MGZ};"
        "mrconvert {input.POSTMRI_NIFTI_IMG_ORIG} {output.POSTMRI_NIFTI_IMG_MGZ};"


rule normalize_image:
    input:
        POSTMRI_NIFTI_IMG_MGZ = os.path.join(RESECTION_VOLUME_DIR,
                                             "postT1.mgz"),
        PREMRI_NIFTI_IMG_MGZ = os.path.join(PATIENT_OUTPUT_DIR,
                                            "T1.mgz"),
    output:
        POSTMRI_IMG_MGZ_norm = os.path.join(RESECTION_VOLUME_DIR,
                                             "postT1_normalize.mgz"),
        PREMRI_IMG_MGZ_norm = os.path.join(RESECTION_VOLUME_DIR,
                                            "preT1_normalize.mgz"),
    shell:
        "cp {input.PREMRI_NIFTI_IMG_MGZ} {output.PREMRI_IMG_MGZ_norm};"
        "mri_normalize {input.POSTMRI_NIFTI_IMG_MGZ} {output.POSTMRI_IMG_MGZ_norm};"
        "mri_convert -c {output.POSTMRI_IMG_MGZ_norm} {output.POSTMRI_IMG_MGZ_norm};"



"""
Rule for coregistering .nifit images -> .nifti for T1 space

E.g. useful for CT, and DTI images to be coregistered
"""
rule coregistert1_post_to_pre:
    input:
        # POSTMRI_NIFTI_IMG_ORIG = os.path.join(PATIENT_OUTPUT_DIR,
        #                             "postT1.nii"),
        # PREMRI_NIFTI_IMG_ORIG = os.path.join(PATIENT_OUTPUT_DIR,
        #                              "T1.nii"),
        PREMRI_NIFTI_IMG_MGZ = os.path.join(RESECTION_VOLUME_DIR,
                                            "preT1_normalize.mgz"),
        POSTMRI_NIFTI_IMG_MGZ = os.path.join(RESECTION_VOLUME_DIR,
                                             "postT1_normalize.mgz"),
    output:
        # POSTT1_IN_PRE_NIFTI_IMG_ORIGgz =os.path.join(RESECTION_VOLUME_DIR,
        #                                  "POST_IN_PRE_T1.nii"),
        # POSTT1_IN_PRE_NIFTI_IMG_ORIG= os.path.join(RESECTION_VOLUME_DIR,
        #                                "POST_IN_PRE_T1.nii"),
        POSTT1_IN_PRE_NIFTI_IMG_ORIGgz = os.path.join(RESECTION_VOLUME_DIR,
                                                      "POST_IN_PRE_T1.mgz"),
        # mapping matrix for post to pre in T1
        MAPPING_FILE_ORIG = os.path.join(RESECTION_VOLUME_DIR,
                                    "fsl_post-to-pre-t1_omat.txt"),
    shell:
        "flirt -in {input.POSTMRI_NIFTI_IMG_ORIG} \
                            -ref {input.PREMRI_NIFTI_IMG_ORIG} \
                            -omat {output.MAPPING_FILE_ORIG} \
                            -out {output.POSTT1_IN_PRE_NIFTI_IMG_ORIGgz};"
        # "mrconvert {output.POSTT1_IN_PRE_NIFTI_IMG_ORIGgz} {output.POSTT1_IN_PRE_NIFTI_IMG_ORIG};"

"""
Rule for robust registration of two volumes within two volumes
"""
rule robust_registration_post_to_pre:
    input:
        PREMRI_NIFTI_IMG_MGZ = os.path.join(RESECTION_VOLUME_DIR,
                                     "preT1_normalize.mgz"),
        POSTMRI_NIFTI_IMG_MGZ = os.path.join(RESECTION_VOLUME_DIR,
                                     "postT1_normalize.mgz"),
    output:
        output_registration_file = os.path.join(RESECTION_VOLUME_DIR,
                                                "post_in_pre_T1_robustregistration.txt"),
        output_registration_image = os.path.join(RESECTION_VOLUME_DIR,
                                                 "post_in_pre_T1_robustregistration.mgz"),
        weights_file = os.path.join(RESECTION_VOLUME_DIR,
                                                "post_in_pre_T1_outlierweights.mgz")
    shell:
        "mri_robust_register --mov {input.POSTMRI_NIFTI_IMG_MGZ} \
                            --dst {input.PREMRI_NIFTI_IMG_MGZ} \
                            --lta {output.output_registration_file} \
                            --mapmovhdr {output.output_registration_image} \
                            -weights {output.weights_file} \
                            --satit \
                            --iscale;"

"""
Rule for running lddmm algorithm script using tensorflow
"""
rule lddmm_registration_post_to_pre:
    input:
        PREMRI_NIFTI_IMG_MGZ = os.path.join(RESECTION_VOLUME_DIR,
                                            "preT1_normalize.mgz"),
        POSTMRI_NIFTI_IMG_MGZ = os.path.join(RESECTION_VOLUME_DIR,
                                             "postT1_normalize.mgz"),
    output:
        LDDMM_MAPPED_FILE=os.path.join(RESECTION_VOLUME_DIR,
                                        "ldmm_post-to-pre-t1_omat.txt"),
        output_registration_image = os.path.join(RESECTION_VOLUME_DIR,
                                        "post_in_pre_T1_lddmm.mgz"),
    shell:
        "echo 'need to implement.'"

rule clean:
    params:
        resectiondir = expand(RESECTION_VOLUME_DIR,
                        patient_id=config['patients']),
    shell:
        "rm {params.resectiondir}/*normalize.mgz;"


'''  POSSIBLY DEPRECATED IF NOT NEEDED '''


"""
Runs a preconversion for all image volumes into the same coordinate space.
"""
"""
Rule for converting coordinate systems to:

    RAS, Talairach.

Also converts img orientations to a standard template orientation via FSL.

Make sure you read up on the conversion systems to make sure that each part of pipeline 
assumes the right coordinate system.

Reference: https://www.slicer.org/wiki/Coordinate_systems
"""
rule convert_coordinate_system_raw:
    input:
        raw_mri_file = os.path.join(PATIENT_OUTPUT_DIR,
                                    "postT1.nii"),
        talairach_transform_file = os.path.join(config['finaloutput_datadir'],
                                                "{patient_id}",
                                                "transforms/talairach.xfm"),
    output:
        ras_mri_volume = os.path.join(RESECTION_VOLUME_DIR,
                                      "postT1.RAS.nii.gz"),
        tal_mri_volume = os.path.join(RESECTION_VOLUME_DIR,
                                      "postT1.TAL.nii.gz"),
    shell:
        # convert mri volumes to RAS and TAL
        "echo 'Running on original images!';"
        "mri_convert -rt nearest --out_orientation RAS {input.raw_mri_file} {output.ras_mri_volume};"
        "mri_convert {input.raw_mri_file} --apply_transform {input.talairach_transform_file} -oc 0 0 0 {output.tal_mri_volume};"

rule reorient_raw_coordinate_system:
    input:
        ras_mri_volume = os.path.join(RESECTION_VOLUME_DIR,
                                      "postT1.RAS.nii.gz"),
    output:
        ras_mri_std_volume = os.path.join(RESECTION_VOLUME_DIR,
                                          "postT1.RAS.RO.nii.gz"),
    shell:
        # reorient to a standardized format
        "fslreorient2std {input.ras_mri_volume} {output.ras_mri_std_volume};"


"""
Rule for extracting the subcortical regions

- creates a new folder aseg2srf inside the fs_output data directory
- c/p this into our final result directory
"""
rule create_subcortical_volume:
    input:
        aseg_output_file=os.path.join(config['finaloutput_datadir'],
                                     "{patient_id}",
                                    "aseg.mgz"),
        norm_output_file=os.path.join(config['finaloutput_datadir'],
                                     "{patient_id}",
                                    "norm.mgz"),
    params:
        new_FREESURFER_HOME=os.path.join(config['finaloutput_datadir'],
                                            "{patient_id}"),
        subj_dir=os.path.join(config['fs_outputdatadir']),
        patient="{patient_id}",
        scripts_dir=SCRIPTS_UTIL_DIR
    output:
        subcort_success_flag_file=os.path.join(config['finaloutput_datadir'],
                                            "{patient_id}",
                                            "{patient_id}_subcort_success.txt"),
    shell:
        # generate subcortical region volume bounding surfaces
        "export SUBJECTS_DIR={params.subj_dir}; \
        SUBJECTS_DIR={params.subj_dir}; \
	    {params.scripts_dir}/aseg2srf -s {params.patient};"

        "cp -r {params.subj_dir}/{params.patient}/aseg2srf/ {params.new_FREESURFER_HOME}/aseg2srf; \
        touch {output.subcort_success_flag_file}; "

