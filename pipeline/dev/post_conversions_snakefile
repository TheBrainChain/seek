import snakemake
import os


configfile: "./config/localconfig.yaml"
snakemake.utils.validate(config, "./config/preformat_config.schema.yaml")

# get the environment variable for freesurfer - for use in getting access to lut's
FREESURFER_HOME = os.getenv("FREESURFER_HOME") or ''
MRTRIX3_HOME = os.getenv("MRTRIX3_HOME") or ''
HOME_DIR="../../"
SCRIPTS_UTIL_DIR = "../../neuroimg/format/"
ATLAS=['dk']

parc = "aparc.a2009s"
aa = "aparc+aseg"
sval = "pial"
hemispheres = ['lh', 'rh']
resamp_target = "fsaverage5"

# First rule
rule all:
    input:
        # output_dk_voxel_file = expand(os.path.join(config["finaloutput_datadir"],
        #                                            "{patient_id}", "voxel",
        #                                "voxels_in_T1_volume_dk.txt"),
        #                                 patient_id=config['patients']),
        # output_destrieux_voxel_file = expand(os.path.join(config["finaloutput_datadir"],
        #                                            "{patient_id}", "voxel",
        #                                             "voxels_in_T1_volume_destrieux.txt"),
        #                               patient_id=config['patients']),
        # master output file
        output_file=expand(os.path.join(config['finaloutput_datadir'],
                                                "{patient_id}",
                                                "tvb/connectivity.zip"), patient_id=config['patients']),
        # coregistered CT to T1 image
        CT_IN_T1_NIFTI_IMG_ORIG = expand(os.path.join(config['finaloutput_datadir'],
                                               "{patient_id}",
                                               "coregistration",
                                               "CT_IN_T1.nii"),
                                         patient_id=config['patients']),
        # mapping matrix for CT to T1
        MAPPING_FILE=expand(os.path.join(config['finaloutput_datadir'],
                                        "{patient_id}",
                                         "coregistration",
                                        "fsl_ct-to-t1_omat.txt"),
                                    patient_id=config['patients']),
        # label in source lut volume
        label_volume_file = expand(os.path.join(config['finaloutput_datadir'],
                                                 "{patient_id}",
                                                 "tvb",
                                                 "label_in_T1_volume.{atlas}.nii.gz"),
                                            patient_id=config['patients'], atlas=ATLAS),
        # annotation subsampled file
        output_subsampled_annotfile = expand(os.path.join(config['finaloutput_datadir'],
                                                        "{patient_id}",
                                                        "{hemisphere}."+parc+".annot."+resamp_target),
                                             hemisphere=hemispheres,
                                             patient_id=config['patients']),
        # surface subsampled file
        output_subsampled_surffile = expand(os.path.join(config['finaloutput_datadir'],
                                                        "{patient_id}",
                                                        "{hemisphere}."+sval+"."+resamp_target),
                                            hemisphere = hemispheres,
                                            patient_id=config['patients']),
    shell:
        "echo 'done'"



"""
Rule for converting from .nii.gz -> .nii and .mgz for easier viewing by matlab programs that can't read in 
.nii.gz

"""
rule convert_to_nii:
    input:
        ras_mri_volume = os.path.join(config['finaloutput_datadir'],
                                      "{patient_id}",
                                      "converted_coord_system",
                                      "T1.RAS.nii.gz"),
        ras_ct_volume = os.path.join(config['finaloutput_datadir'],
                                     "{patient_id}",
                                     "converted_coord_system",
                                     "CT.RAS.nii.gz"),
    output:
        ras_mri_volume = os.path.join(config['finaloutput_datadir'],
                              "{patient_id}",
                              "converted_coord_system",
                              "T1.RAS.nii"),
        ras_ct_volume = os.path.join(config['finaloutput_datadir'],
                             "{patient_id}",
                             "converted_coord_system",
                             "CT.RAS.nii"),
    shell:
        "mri_convert {input.ras_mri_volume} {output.ras_mri_volume};"
        "mri_convert {input.ras_ct_volume} {output.ras_ct_volume};"

"""
Rule for subsampling the surface geometry.

Lowers computation time and also provides regularization approach when doing 
co-registration via flirt. Subsample -> get gross structures and then coregister with initial first

rtd = resampled-data

--srcsubject Name of source subject. As found in $SUBJECTS_DIR or ico for icosahedron. The input data must have been sampled onto this subject's surface (eg, using mri_vol2surf)

--srcsurfval Name of file where the data on the source surface is located.

--trgsubject ame of target subject as found in $SUBJECTS_DIR or ico for icosahedron.

--trgsurfval Name of file where the data on the target surface will be stored.

--hemi (lh or rh)


"""

rule subsample_surface:
    input:
        outsuccess_file=os.path.join(config['fs_outputdatadir'],
                                "{patient_id}_recon_success.txt"),
        ras_mri_volume = os.path.join(config['finaloutput_datadir'],
                                      "{patient_id}",
                                      "converted_coord_system",
                                      "T1.RAS.nii.gz"),
        tal_mri_volume = os.path.join(config['finaloutput_datadir'],
                                      "{patient_id}",
                                      "converted_coord_system",
                                      "T1.TAL.nii.gz"),
        ras_ct_volume = os.path.join(config['finaloutput_datadir'],
                                     "{patient_id}",
                                     "converted_coord_system",
                                     "CT.RAS.nii.gz"),
        tal_ct_volume = os.path.join(config['finaloutput_datadir'],
                                     "{patient_id}",
                                     "converted_coord_system",
                                     "CT.TAL.nii.gz"),
        mgz_mri_ras_volume = os.path.join(config['finaloutput_datadir'],
                                          "{patient_id}",
                                        "converted_coord_system",
                                          "T1.mgz.RAS.nii.gz"),
        mgz_mri_tal_volume = os.path.join(config['finaloutput_datadir'],
                                          "{patient_id}",
                                          "converted_coord_system",
                                        "T1.mgz.TAL.nii.gz"),
    params:
        patient="{patient_id}",
        SUBJECTS_DIR=os.path.join(config['fs_outputdatadir']),
        resamp_target = resamp_target,
        parc = parc,
        aa = aa,
        sval = sval,
        hemisphere="{hemisphere}",
        resamp_output_labelpath = os.path.join(config['fs_outputdatadir'],
                                        '{patient_id}'),
        output_annotfile = os.path.join(config['fs_outputdatadir'],
                                            "{patient_id}",
                                            "label",
                                            "{hemisphere}." + parc + ".annot." + resamp_target),
        output_surffile = os.path.join(config['fs_outputdatadir'],
                                           "{patient_id}",
                                            "surf",
                                           "{hemisphere}." + sval + "." + resamp_target),
        t1_mgz_file = os.path.join(config['fs_outputdatadir'],
                                            "{patient_id}",
                                            "mri/T1.mgz")
    output:
        output_subsampled_annotfile=os.path.join(config['finaloutput_datadir'],
                                                "{patient_id}",
                                                "{hemisphere}." + parc + ".annot." + resamp_target),
        output_subsampled_surffile = os.path.join(config['finaloutput_datadir'],
                                                   "{patient_id}",
                                                   "{hemisphere}." + sval + "." + resamp_target),
    shell: # {params.src_subject} \# {input.aseg_output_file} \
        # This first command, subsamples the pial data for a hemisphere
        # -> uses a target pial surface to get mapped onto it.
        # -> stores in trg/surf
        "echo $SUBJECTS_DIR;"
          "mri_surf2surf \
            --srcsubject {params.patient} \
            --trgsubject {params.resamp_target} \
            --hemi {params.hemisphere} \
            --sval-xyz {params.sval} \
            --tval {params.sval}.{params.patient} \
            --tval-xyz {params.t1_mgz_file}; "

        # copies resampled file over to our original subjects directory
          "echo '{params.SUBJECTS_DIR}/{params.resamp_target}/surf/{params.hemisphere}.{params.sval}.{params.patient} \
                {params.SUBJECTS_DIR}/{params.patient}/surf/{params.hemisphere}.{params.sval}.{params.resamp_target}';"
          "cp {params.SUBJECTS_DIR}/{params.resamp_target}/surf/{params.hemisphere}.{params.sval}.{params.patient} \
                {params.SUBJECTS_DIR}/{params.patient}/surf/{params.hemisphere}.{params.sval}.{params.resamp_target};"

        # sub-samples the annotations accordingly
          "mri_surf2surf \
            --srcsubject {params.patient} \
            --trgsubject {params.resamp_target} \
            --hemi {params.hemisphere} \
            --sval-annot {params.resamp_output_labelpath}/label/{params.hemisphere}.{params.parc}.annot \
            --tval {params.resamp_output_labelpath}/label/{params.hemisphere}.{params.parc}.annot.{params.resamp_target};"

        # moves files to the temporary directory
        "cp {params.output_surffile} {output.output_subsampled_surffile};"
        "cp {params.output_annotfile} {output.output_subsampled_annotfile};"


"""
Rule for converting coordinate systems to:

    RAS, Talairach.

Also converts img orientations to a standard template orientation via FSL.

Make sure you read up on the conversion systems to make sure that each part of pipeline 
assumes the right coordinate system.

Reference: https://www.slicer.org/wiki/Coordinate_systems
"""
rule convert_coordinate_system_raw:
    input:
        raw_ct_file = os.path.join(config['finaloutput_datadir'],
                                   "{patient_id}",
                                   "CT.nii.gz"),
        raw_mri_file = os.path.join(config['finaloutput_datadir'],
                                    "{patient_id}",
                                    "T1.nii.gz"),
        talairach_transform_file = os.path.join(config['finaloutput_datadir'],
                                                "{patient_id}",
                                                "transforms/talairach.xfm"),
    output:
        ras_mri_volume = os.path.join(config['finaloutput_datadir'],
                                      "{patient_id}",
                                      "converted_coord_system",
                                      "T1.RAS.nii.gz"),
        tal_mri_volume = os.path.join(config['finaloutput_datadir'],
                                      "{patient_id}",
                                      "converted_coord_system",
                                      "T1.TAL.nii.gz"),
        ras_ct_volume = os.path.join(config['finaloutput_datadir'],
                                     "{patient_id}",
                                     "converted_coord_system",
                                     "CT.RAS.nii.gz"),
        tal_ct_volume = os.path.join(config['finaloutput_datadir'],
                                     "{patient_id}",
                                     "converted_coord_system",
                                     "CT.TAL.nii.gz"),

    shell:
        # convert mri and ct volumes to RAS and TAL
        "echo 'Running on original images!';"
        "mri_convert -rt nearest --out_orientation RAS {input.raw_ct_file} {output.ras_ct_volume};"
        "mri_convert -rt nearest --out_orientation RAS {input.raw_mri_file} {output.ras_mri_volume};"
        "mri_convert {input.raw_ct_file} --apply_transform {input.talairach_transform_file} -oc 0 0 0 {output.tal_ct_volume};"
        "mri_convert {input.raw_mri_file} --apply_transform {input.talairach_transform_file} -oc 0 0 0 {output.tal_mri_volume};"


rule reorient_raw_coordinate_system:
    input:
        ras_mri_volume = os.path.join(config['finaloutput_datadir'],
                                      "{patient_id}",
                                      "converted_coord_system",
                                      "T1.RAS.nii.gz"),
        ras_ct_volume = os.path.join(config['finaloutput_datadir'],
                                     "{patient_id}",
                                     "converted_coord_system",
                                     "CT.RAS.nii.gz"),
        mgz_mri_ras_volume = os.path.join(config['finaloutput_datadir'],
                                  "{patient_id}",
                                  "converted_coord_system",
                                  "T1.mgz.RAS.nii.gz"),
    output:
        ras_ct_std_volume = os.path.join(config['finaloutput_datadir'],
                                         "{patient_id}",
                                         "converted_coord_system",
                                         "CT.RAS.RO.nii.gz"),
        ras_mri_std_volume = os.path.join(config['finaloutput_datadir'],
                                          "{patient_id}",
                                          "converted_coord_system",
                                          "T1.RAS.RO.nii.gz"),
        mgz_mri_ras_std_volume = os.path.join(config['finaloutput_datadir'],
                                      "{patient_id}",
                                      "converted_coord_system",
                                      "T1.mgz.RAS.RO.nii.gz"),
    shell:
        # reorient to a standardized format
        "fslreorient2std {input.ras_ct_volume} {output.ras_ct_std_volume};"
        "fslreorient2std {input.ras_mri_volume} {output.ras_mri_std_volume};"
        "fslreorient2std  {output.mgz_mri_ras_volume} {output.mgz_mri_ras_std_volume};"

rule convert_coordinate_system_T1mgz:
    input:
        mgz_mri_file = os.path.join(config['finaloutput_datadir'],
                                    "{patient_id}",
                                    "T1.mgz"),
        talairach_transform_file = os.path.join(config['finaloutput_datadir'],
                                        "{patient_id}",
                                        "transforms/talairach.xfm"),
    output:
        mgz_mri_ras_volume = os.path.join(config['finaloutput_datadir'],
                                          "{patient_id}",
                                          "converted_coord_system",
                                          "T1.mgz.RAS.nii.gz"),
        mgz_mri_tal_volume = os.path.join(config['finaloutput_datadir'],
                                          "{patient_id}",
                                          "converted_coord_system",
                                          "T1.mgz.TAL.nii.gz"),
    shell:
        "mri_convert -rt nearest --out_orientation RAS {input.mgz_mri_file} {output.mgz_mri_ras_volume};"
        "mri_convert {input.mgz_mri_file} --apply_transform {input.talairach_transform_file} -oc 0 0 0 {output.mgz_mri_tal_volume};"
