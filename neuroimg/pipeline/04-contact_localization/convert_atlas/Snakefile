import os

configfile: "../../config/localconfig.yaml"

# get the environment variable for freesurfer - for use in getting access to lut's
ATLAS=['dk', 'destrieux']

''' USER DEFINED DIRECTORIES TO STORE FINAL DATA IN ORGANIZED SUBFOLDERS '''
FS_PATIENT_OUTPUT_DIR = os.path.join(config['fs_outputdatadir'],
                                     "{patient_id}")
TVB_OUTPUT_DIR = os.path.join(FS_PATIENT_OUTPUT_DIR,
                                                "tvb")
NATIVESPACE_OUTPUT_DIR = os.path.join(FS_PATIENT_OUTPUT_DIR,
                                      "nativespace-transform")
COREGISTRATION_OUTPUT_DIR = os.path.join(config['fs_outputdatadir'],
                                         "{patient_id}",
                                         "CT")
ELECS_DIR = os.path.join(FS_PATIENT_OUTPUT_DIR,
                                         "elecs")


# First rule
rule all:
    input:
        txt_talairach_file = expand(os.path.join(ELECS_DIR,"talairach",
                                    "{patient_id}_tal_elec_xyz.mat"),
                                                patient_id = config['patients']),
    shell:
        "echo 'done'"

"""
Rule for conversion .mat -> .txt

Converts output of fieldtrip toolbox .mat files named accordingly into txt files.
Converts both original xyz coords of the elec_f.mat file and the T1 mapped xyz coordinates
into txt files.
"""
rule label_talairach_elecs:
    input:
        # txt_talairach_file = os.path.join(ELECS_DIR, "talairach",
        #                                  "{patient_id}_tal_elec_xyz.txt"),
        txt_talairach_file = os.path.join(ELECS_DIR, "talairach",
                                  "{patient_id}.txt"),
    output:
        labeled_txt_talairach_file = os.path.join(ELECS_DIR, "talairach",
                                       '{patient_id}_tal_elec_xyz.mat'),
    shell:
        "python -m label_talairach_coords {input.txt_talairach_file} " \
                                        "{output.labeled_txt_talairach_file};"

# rule format_talairach_file:
#     input:
#         original_elec_file = os.path.join(ELECS_DIR, "talairach",
#                                          "{patient_id}.txt"),
#     params:
#         TALAIRACHDIR = os.path.join(ELECS_DIR, "talairach"),
#     output:
#         txt_talairach_file = os.path.join(ELECS_DIR,"talairach",
#                                          "{patient_id}_tal_elec_xyz.txt"),
#     shell:
#         "python -m format_talairach_file {input.original_elec_file} " \
#                                         "{output.txt_talairach_file};"


rule move_talairach_files:
    input:
        original_elec_file = os.path.join(ELECS_DIR,
                                  "{patient_id}.csv"),
    params:
        TALAIRACHDIR = os.path.join(ELECS_DIR, "talairach"),
    output:
        original_elec_file = os.path.join(ELECS_DIR, "talairach",
                                  "{patient_id}.txt"),
    shell:
        "mkdir -p {params.TALAIRACHDIR};"
        "mv {input.original_elec_file} {output.original_elec_file};"

rule clean:
    input:
        txt_talairach_file = expand(os.path.join(ELECS_DIR,"talairach",
                                         "{patient_id}_tal_elec_xyz.mat"), patient_id = config['patients']),
    shell:
        "rm {input.txt_talairach_file};"