import os
import sys
from pathlib import Path

from mne_bids import make_bids_basename

sys.path.append("../../../")
from seek.pipeline.fileutils import BidsRoot, BIDS_ROOT, _get_seek_config
from seek.format.bids import bids_conversion

"""
export SUBJECTS_DIR=~/hdd/data/neuroimaging/freesurfer_output/

A snakemake file for running reconstructions on the neuroimaging data.

snakemake --dag | dot -Tpdf > dag_pipeline_coregistration.pdf

"""
configfile: _get_seek_config()

# get the freesurfer patient directory
bids_root = BidsRoot(BIDS_ROOT(config['bids_root']))
subject_wildcard = "{subject}"

# initialize directories that we access in this snakemake
RAW_CT_FOLDER = bids_root.get_rawct_dir(subject_wildcard)
RAW_POSTMRI_FOLDER = bids_root.get_postmri_dir(subject_wildcard)
FS_DIR = bids_root.freesurfer_dir
FSPATIENT_SUBJECT_DIR = bids_root.get_freesurfer_patient_dir(subject_wildcard)
FSOUT_MRI_FOLDER = Path(FSPATIENT_SUBJECT_DIR) / "mri"
FSOUT_POSTMRI_FOLDER = Path(FSPATIENT_SUBJECT_DIR) / "postsurgerymri"

SESSION = 'postsurgery'

def _get_bids_basename(subject, imgtype, session=SESSION):
    """Wildcard function to get bids_basename."""
    bids_fname = make_bids_basename(subject,
                                    session=SESSION,
                                    suffix=f"{imgtype}.nii.gz")
    return bids_fname


def _get_subject_dir(bids_root, subject):
    return os.path.join(bids_root, f"sub-{subject}")


def _get_anat_bids_dir(bids_root, subject, session):
    return os.path.join(_get_subject_dir(bids_root, subject), f'ses-{session}', 'anat')


subworkflow prep_workflow:
    workdir:
        "../01-prep/"
    snakefile:
        "../01-prep/Snakefile"
    configfile:
        _get_seek_config()


# First rule
rule all:
    input:
        # MRI_NIFTI_IMG = expand(os.path.join(_get_anat_bids_dir(bids_root.bids_root, subject_wildcard),
        #                                     _get_bids_basename(subject_wildcard, imgtype='T1w')),
        #                                     subject=config['patients']),
        # mapping matrix for post T1 to pre T1
        MAPPING_FILE = expand(os.path.join(FSOUT_POSTMRI_FOLDER, "fsl_postt1-to-t1_omat.txt"),
                              subject=config['patients']),
    params:
        bids_root = bids_root.bids_root,
    shell:
        "echo 'done';"
        "bids-validator {params.bids_root};"

"""
Rule for prepping fs_recon by converting dicoms -> NIFTI images.

They are reoriented into 'LAS' orientation. For more information, see
BIDS specification.
"""
rule convert_dicom_to_bids:
    params:
        MRI_FOLDER = RAW_POSTMRI_FOLDER,
        bids_root = bids_root.bids_root,
    output:
        MRI_bids_fname = os.path.join(_get_anat_bids_dir(bids_root.bids_root, subject_wildcard, session=SESSION),
                                      _get_bids_basename(subject_wildcard, imgtype='T1w')),
    run:
        bids_conversion.convert_img_to_bids(params.MRI_FOLDER, params.bids_root, output.MRI_bids_fname)



"""
Rule for coregistering postsurgical T1 to presurgical T1 RAS.

This is because RAS is the preferred direction in Seg3D when we segment the image, it should be this one.
Then the corersponding coregistration from the RAS to FreeSurfer space gives the correct orientation.

postsurgical_T1w -> presurgical_T1w_RAS.
"""
rule coregistert1_post_to_pre_RAS:
    input:
        MRI_bids_fname = os.path.join(_get_anat_bids_dir(bids_root.bids_root, subject_wildcard, session=SESSION),
                                      _get_bids_basename(subject_wildcard, imgtype='T1w_RAS')),
        PREMRI_NIFTI_IMG = prep_workflow(os.path.join(_get_anat_bids_dir(bids_root.bids_root, subject_wildcard, session='presurgery'),
                                         _get_bids_basename(subject_wildcard, imgtype='T1w_RAS'))),
    output:
        PREMRI_NIFTI_IMG = os.path.join(FSOUT_POSTMRI_FOLDER, "preT1_RAS.nii"),
        POSTMRI_NIFTI_IMG = os.path.join(FSOUT_POSTMRI_FOLDER, "postT1_in_preT1_RAS.nii.gz"),
        # mapping matrix for post to pre in T1
        MAPPING_FILE_ORIG = os.path.join(FSOUT_POSTMRI_FOLDER, "fsl_postt1-to-t1RAS_omat.txt"),
    shell:
        "cp {input.PREMRI_NIFTI_IMG} {output.PREMRI_NIFTI_IMG};"
        "flirt -in {input.MRI_bids_fname} \
                            -ref {input.PREMRI_NIFTI_IMG} \
                            -omat {output.MAPPING_FILE_ORIG} \
                            -out {output.POSTMRI_NIFTI_IMG};"


# rule map_postRAS_to_preFS:
    