"""
======================================================
07. Group Analysis Workflow using FreeSurfer to MNI152
======================================================

In this pipeline, we prep the reconstruction workflow
by putting MRI and CT data into the BIDS layout and
re-orient images to RAS with ACPC alignment.

We assume that there is only one set of dicoms for CT and MRI
data.

This pipeline depends on the following functions:

    * mrconvert
    * acpcdetect

from FreeSurfer6+, acpcdetect2.0.
"""

import os
import sys
from pathlib import Path

from mne_bids import make_bids_basename, make_bids_folders

sys.path.append("../../../")
from seek.pipeline.fileutils import (BidsRoot, BIDS_ROOT, _get_seek_config,
                                     TEMPLATE_SUBJECT, _get_session_name,
                                     _get_anat_bids_dir, _get_bids_basename)

"""
export SUBJECTS_DIR=~/hdd/data/neuroimaging/freesurfer_output/

A snakemake file for running reconstructions on the neuroimaging data.

snakemake --dag | dot -Tpdf > dag_pipeline_coregistration.pdf

"""
configfile: _get_seek_config()

# get the freesurfer patient directory
bids_root = BidsRoot(BIDS_ROOT(config['bids_root']))
subject_wildcard = "{subject}"

# initialize directories that we access in this snakemake
RAW_CT_FOLDER = bids_root.get_rawct_dir(subject_wildcard)
RAW_MRI_FOLDER = bids_root.get_postmri_dir(subject_wildcard)
FS_DIR = bids_root.freesurfer_dir
FSPATIENT_SUBJECT_DIR = bids_root.get_freesurfer_patient_dir(subject_wildcard)
FSOUT_MRI_FOLDER = Path(FSPATIENT_SUBJECT_DIR) / "mri"
FSOUT_POSTMRI_FOLDER = Path(FSPATIENT_SUBJECT_DIR) / "postsurgerymri"
FSOUT_ELECS_FOLDER = Path(FSPATIENT_SUBJECT_DIR) / "elecs"
FSOUT_CVS_DIR = Path(FSPATIENT_SUBJECT_DIR) / 'cvs'

session = _get_session_name(config)
acquisition = 'seeg'
# acquisition = _get_acquisition_name(config)

data_path = make_bids_folders(subject=subject_wildcard, session=session,
                              bids_root=str(bids_root.bids_root), make_dir=False,
                              overwrite=False, verbose=False)
manual_coordsystem_fname = make_bids_basename(
    subject=subject_wildcard, session=session, processing='manual',
    acquisition=acquisition,
    suffix='coordsystem.json', prefix=data_path)
manual_electrodes_fname = make_bids_basename(
    subject=subject_wildcard, session=session, processing='manual',
    acquisition=acquisition,
    suffix='electrodes.tsv', prefix=data_path)

cvs_electrodes_fname = make_bids_basename(
    subject=subject_wildcard, session=session, processing='manual',
    acquisition=acquisition, space='mni',
    suffix='electrodes.tsv', prefix=data_path)

subworkflow reconstruction_workflow:
    workdir:
        "../02-reconstruction/"
    snakefile:
        "../02-reconstruction/Snakefile"
    configfile:
        _get_seek_config()


# First rule
rule all:
    input:
        # morph file from {subject} to template subject
        morph_file = expand(os.path.join(FSOUT_CVS_DIR, f'combined_to{TEMPLATE_SUBJECT}_elreg_afteraseg-norm.tm3d'),
                              subject=config['patients']),
    params:
        bids_root = bids_root.bids_root,
    shell:
        "echo 'done';"
        "bids-validator {params.bids_root};"

"""
Rule for applying nonlinear warping subject to the MNI coordinate template 
using  FreeSurfer's mri_cvs_register (i.e. combined volume and surface) 
registration.
"""
rule cvs_register:
    input:
        PREMRI_NIFTI_IMG = reconstruction_workflow(os.path.join(FSOUT_MRI_FOLDER, "T1_fs_LIA.nii")),
    params:
        subject = subject_wildcard,
        template = TEMPLATE_SUBJECT,
    output:
        morph_file = os.path.join(FSOUT_CVS_DIR, f'combined_to{TEMPLATE_SUBJECT}_elreg_afteraseg-norm.tm3d'),
    shell:
        "echo 'Performing mri cvs nonlinear warping to MNI template...';"
        'mri_cvs_register --mov {params.subject} ' \
                            '--template {params.template} ' \
                            '--openmp 4 ' \
                            '--nocleanup;'

# rule apply_cvs_warp_to_electrodes:
#     input:
#         template_mri_mgz = os.path.join(FS_DIR, TEMPLATE_SUBJECT, 'mri', 'brain.mgz'),
#         morph_file = os.path.join(FSOUT_CVS_DIR, f'combined_to{TEMPLATE_SUBJECT}_elreg_afteraseg-norm.tm3d'),
#     output:
#         nearest_point_coords_file = os.path.join(FSOUT_ELECS_FOLDER, cvs_electrodes_fname),
#     shell:
#         "echo 'Applying nonlinear warping to electrodes...;"
#         'applyMorph --template {input.template_mri_mgz} ' \
#                     '--transform {input.morph_file} ' \
#                     'tract_point_list {input.RAS_txt_coords_file} ' \
#                     '{output.nearest_point_coords_file} nearest;'
#
# rule apply_cvs_warp_to_surfaces:
#     input:
#
#     params:
#         subject = subject_wildcard,
#         template = TEMPLATE_SUBJECT,
#         subject_dir = FSPATIENT_SUBJECT_DIR,
#     output:
#
#     shell:
#         'mri_label2label --srclabel ' + labelname + ' --srcsubject {params.subject} ' \
#                                                     '--trgsubject {params.template} ' \
#                                                     '--trglabel ' + trglabel + \
#                     ' --regmethod surface --hemi ' + self.hem + \
#                     ' --trgsurf pial --paint 6 pial --sd {params.subject_dir};'


# rule apply_cvs_warp_to_volumes:

